// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: client.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    client_id,
    client_secret,
    name,
    description,
    website,
    redirect_uri,
    is_public,
    oidc_enabled,
    allowed_scopes,
    allowed_grant_types,
    allowed_response_types
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types
`

type CreateClientParams struct {
	ClientID             string         `json:"client_id"`
	ClientSecret         string         `json:"client_secret"`
	Name                 string         `json:"name"`
	Description          sql.NullString `json:"description"`
	Website              sql.NullString `json:"website"`
	RedirectUri          string         `json:"redirect_uri"`
	IsPublic             bool           `json:"is_public"`
	OidcEnabled          bool           `json:"oidc_enabled"`
	AllowedScopes        []string       `json:"allowed_scopes"`
	AllowedGrantTypes    []string       `json:"allowed_grant_types"`
	AllowedResponseTypes []string       `json:"allowed_response_types"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ClientID,
		arg.ClientSecret,
		arg.Name,
		arg.Description,
		arg.Website,
		arg.RedirectUri,
		arg.IsPublic,
		arg.OidcEnabled,
		pq.Array(arg.AllowedScopes),
		pq.Array(arg.AllowedGrantTypes),
		pq.Array(arg.AllowedResponseTypes),
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClientByClientID = `-- name: GetClientByClientID :one
SELECT id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types FROM clients
WHERE client_id = $1 LIMIT 1
`

func (q *Queries) GetClientByClientID(ctx context.Context, clientID string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByClientID, clientID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types FROM clients
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClientByID(ctx context.Context, id int32) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types FROM clients
ORDER BY created_at DESC
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ClientSecret,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.RedirectUri,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OidcEnabled,
			pq.Array(&i.AllowedScopes),
			pq.Array(&i.AllowedGrantTypes),
			pq.Array(&i.AllowedResponseTypes),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET
    name = $2,
    description = $3,
    website = $4,
    redirect_uri = $5,
    is_public = $6,
    oidc_enabled = $7,
    allowed_scopes = $8,
    allowed_grant_types = $9,
    allowed_response_types = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types
`

type UpdateClientParams struct {
	ID                   int32          `json:"id"`
	Name                 string         `json:"name"`
	Description          sql.NullString `json:"description"`
	Website              sql.NullString `json:"website"`
	RedirectUri          string         `json:"redirect_uri"`
	IsPublic             bool           `json:"is_public"`
	OidcEnabled          bool           `json:"oidc_enabled"`
	AllowedScopes        []string       `json:"allowed_scopes"`
	AllowedGrantTypes    []string       `json:"allowed_grant_types"`
	AllowedResponseTypes []string       `json:"allowed_response_types"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Website,
		arg.RedirectUri,
		arg.IsPublic,
		arg.OidcEnabled,
		pq.Array(arg.AllowedScopes),
		pq.Array(arg.AllowedGrantTypes),
		pq.Array(arg.AllowedResponseTypes),
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}

const updateClientSecret = `-- name: UpdateClientSecret :one
UPDATE clients
SET
    client_secret = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types
`

type UpdateClientSecretParams struct {
	ID           int32  `json:"id"`
	ClientSecret string `json:"client_secret"`
}

func (q *Queries) UpdateClientSecret(ctx context.Context, arg UpdateClientSecretParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClientSecret, arg.ID, arg.ClientSecret)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}
