// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    access_token,
    refresh_token,
    token_family,
    device_name,
    ip_address,
    user_agent,
    expires_at,
    previous_token_id,
    user_id
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id
`

type CreateSessionParams struct {
	AccessToken     string         `json:"access_token"`
	RefreshToken    string         `json:"refresh_token"`
	TokenFamily     string         `json:"token_family"`
	DeviceName      sql.NullString `json:"device_name"`
	IpAddress       sql.NullString `json:"ip_address"`
	UserAgent       sql.NullString `json:"user_agent"`
	ExpiresAt       time.Time      `json:"expires_at"`
	PreviousTokenID sql.NullInt32  `json:"previous_token_id"`
	UserID          int32          `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenFamily,
		arg.DeviceName,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
		arg.PreviousTokenID,
		arg.UserID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
