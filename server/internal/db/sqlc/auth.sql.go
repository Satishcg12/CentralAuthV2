// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, username, email, email_verified, password_hash, phone_number, phone_number_verified, is_active, mfa_enabled, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.IsActive,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, username, email, email_verified, password_hash, phone_number, phone_number_verified, is_active, mfa_enabled, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.IsActive,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT id, first_name, last_name, username, email, email_verified, password_hash, phone_number, phone_number_verified, is_active, mfa_enabled, created_at, updated_at FROM users
WHERE username = $1 OR email = $1 LIMIT 1
`

func (q *Queries) GetUserByIdentifier(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdentifier, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.IsActive,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, first_name, last_name, username, email, email_verified, password_hash, phone_number, phone_number_verified, is_active, mfa_enabled, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.IsActive,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (
  username,
  email,
  password_hash,
  first_name,
  last_name,
  phone_number
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, first_name, last_name, username, email, email_verified, password_hash, phone_number, phone_number_verified, is_active, mfa_enabled, created_at, updated_at
`

type RegisterUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
	)
	return err
}
