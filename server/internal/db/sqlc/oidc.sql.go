// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: oidc.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createOIDCAccessToken = `-- name: CreateOIDCAccessToken :one
INSERT INTO oidc_access_tokens (
    token,
    client_id,
    user_id,
    expires_at,
    scopes
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, token, client_id, user_id, expires_at, scopes, created_at
`

type CreateOIDCAccessTokenParams struct {
	Token     string    `json:"token"`
	ClientID  string    `json:"client_id"`
	UserID    int32     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
	Scopes    []string  `json:"scopes"`
}

func (q *Queries) CreateOIDCAccessToken(ctx context.Context, arg CreateOIDCAccessTokenParams) (OidcAccessToken, error) {
	row := q.db.QueryRowContext(ctx, createOIDCAccessToken,
		arg.Token,
		arg.ClientID,
		arg.UserID,
		arg.ExpiresAt,
		pq.Array(arg.Scopes),
	)
	var i OidcAccessToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ClientID,
		&i.UserID,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
		&i.CreatedAt,
	)
	return i, err
}

const createOIDCAuthCode = `-- name: CreateOIDCAuthCode :one
INSERT INTO oidc_auth_codes (
    code,
    client_id,
    user_id,
    redirect_uri,
    expires_at,
    scopes,
    code_challenge,
    code_challenge_method,
    nonce
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, code, client_id, user_id, redirect_uri, expires_at, scopes, code_challenge, code_challenge_method, used, nonce, created_at
`

type CreateOIDCAuthCodeParams struct {
	Code                string         `json:"code"`
	ClientID            string         `json:"client_id"`
	UserID              int32          `json:"user_id"`
	RedirectUri         string         `json:"redirect_uri"`
	ExpiresAt           time.Time      `json:"expires_at"`
	Scopes              []string       `json:"scopes"`
	CodeChallenge       sql.NullString `json:"code_challenge"`
	CodeChallengeMethod sql.NullString `json:"code_challenge_method"`
	Nonce               sql.NullString `json:"nonce"`
}

func (q *Queries) CreateOIDCAuthCode(ctx context.Context, arg CreateOIDCAuthCodeParams) (OidcAuthCode, error) {
	row := q.db.QueryRowContext(ctx, createOIDCAuthCode,
		arg.Code,
		arg.ClientID,
		arg.UserID,
		arg.RedirectUri,
		arg.ExpiresAt,
		pq.Array(arg.Scopes),
		arg.CodeChallenge,
		arg.CodeChallengeMethod,
		arg.Nonce,
	)
	var i OidcAuthCode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.ClientID,
		&i.UserID,
		&i.RedirectUri,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.Used,
		&i.Nonce,
		&i.CreatedAt,
	)
	return i, err
}

const createOIDCRefreshToken = `-- name: CreateOIDCRefreshToken :one
INSERT INTO oidc_refresh_tokens (
    token,
    client_id,
    user_id,
    access_token_id,
    expires_at,
    scopes
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, token, client_id, user_id, access_token_id, expires_at, scopes, revoked, created_at
`

type CreateOIDCRefreshTokenParams struct {
	Token         string    `json:"token"`
	ClientID      string    `json:"client_id"`
	UserID        int32     `json:"user_id"`
	AccessTokenID int32     `json:"access_token_id"`
	ExpiresAt     time.Time `json:"expires_at"`
	Scopes        []string  `json:"scopes"`
}

func (q *Queries) CreateOIDCRefreshToken(ctx context.Context, arg CreateOIDCRefreshTokenParams) (OidcRefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createOIDCRefreshToken,
		arg.Token,
		arg.ClientID,
		arg.UserID,
		arg.AccessTokenID,
		arg.ExpiresAt,
		pq.Array(arg.Scopes),
	)
	var i OidcRefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ClientID,
		&i.UserID,
		&i.AccessTokenID,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
		&i.Revoked,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredOIDCTokens = `-- name: DeleteExpiredOIDCTokens :exec
DELETE FROM oidc_auth_codes WHERE expires_at < NOW() OR used = true
`

func (q *Queries) DeleteExpiredOIDCTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredOIDCTokens)
	return err
}

const getClientWithOIDCSettings = `-- name: GetClientWithOIDCSettings :one
SELECT id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types FROM clients
WHERE client_id = $1 AND oidc_enabled = true
LIMIT 1
`

func (q *Queries) GetClientWithOIDCSettings(ctx context.Context, clientID string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientWithOIDCSettings, clientID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}

const getOIDCAccessTokenByToken = `-- name: GetOIDCAccessTokenByToken :one
SELECT id, token, client_id, user_id, expires_at, scopes, created_at FROM oidc_access_tokens
WHERE token = $1 AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetOIDCAccessTokenByToken(ctx context.Context, token string) (OidcAccessToken, error) {
	row := q.db.QueryRowContext(ctx, getOIDCAccessTokenByToken, token)
	var i OidcAccessToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ClientID,
		&i.UserID,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
		&i.CreatedAt,
	)
	return i, err
}

const getOIDCAuthCodeByCode = `-- name: GetOIDCAuthCodeByCode :one
SELECT id, code, client_id, user_id, redirect_uri, expires_at, scopes, code_challenge, code_challenge_method, used, nonce, created_at FROM oidc_auth_codes
WHERE code = $1 AND used = false AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetOIDCAuthCodeByCode(ctx context.Context, code string) (OidcAuthCode, error) {
	row := q.db.QueryRowContext(ctx, getOIDCAuthCodeByCode, code)
	var i OidcAuthCode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.ClientID,
		&i.UserID,
		&i.RedirectUri,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.Used,
		&i.Nonce,
		&i.CreatedAt,
	)
	return i, err
}

const getOIDCRefreshTokenByToken = `-- name: GetOIDCRefreshTokenByToken :one
SELECT id, token, client_id, user_id, access_token_id, expires_at, scopes, revoked, created_at FROM oidc_refresh_tokens
WHERE token = $1 AND revoked = false AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetOIDCRefreshTokenByToken(ctx context.Context, token string) (OidcRefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getOIDCRefreshTokenByToken, token)
	var i OidcRefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ClientID,
		&i.UserID,
		&i.AccessTokenID,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
		&i.Revoked,
		&i.CreatedAt,
	)
	return i, err
}

const markOIDCAuthCodeAsUsed = `-- name: MarkOIDCAuthCodeAsUsed :exec
UPDATE oidc_auth_codes
SET used = true
WHERE code = $1
`

func (q *Queries) MarkOIDCAuthCodeAsUsed(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, markOIDCAuthCodeAsUsed, code)
	return err
}

const revokeAllClientUserRefreshTokens = `-- name: RevokeAllClientUserRefreshTokens :exec
UPDATE oidc_refresh_tokens
SET revoked = true
WHERE client_id = $1 AND user_id = $2
`

type RevokeAllClientUserRefreshTokensParams struct {
	ClientID string `json:"client_id"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) RevokeAllClientUserRefreshTokens(ctx context.Context, arg RevokeAllClientUserRefreshTokensParams) error {
	_, err := q.db.ExecContext(ctx, revokeAllClientUserRefreshTokens, arg.ClientID, arg.UserID)
	return err
}

const revokeOIDCRefreshToken = `-- name: RevokeOIDCRefreshToken :exec
UPDATE oidc_refresh_tokens
SET revoked = true
WHERE token = $1
`

func (q *Queries) RevokeOIDCRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeOIDCRefreshToken, token)
	return err
}

const updateClientOIDCSettings = `-- name: UpdateClientOIDCSettings :one
UPDATE clients
SET 
    oidc_enabled = $1,
    allowed_scopes = $2,
    allowed_grant_types = $3,
    allowed_response_types = $4,
    updated_at = NOW()
WHERE client_id = $5
RETURNING id, client_id, client_secret, name, description, website, redirect_uri, is_public, created_at, updated_at, oidc_enabled, allowed_scopes, allowed_grant_types, allowed_response_types
`

type UpdateClientOIDCSettingsParams struct {
	OidcEnabled          bool     `json:"oidc_enabled"`
	AllowedScopes        []string `json:"allowed_scopes"`
	AllowedGrantTypes    []string `json:"allowed_grant_types"`
	AllowedResponseTypes []string `json:"allowed_response_types"`
	ClientID             string   `json:"client_id"`
}

func (q *Queries) UpdateClientOIDCSettings(ctx context.Context, arg UpdateClientOIDCSettingsParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClientOIDCSettings,
		arg.OidcEnabled,
		pq.Array(arg.AllowedScopes),
		pq.Array(arg.AllowedGrantTypes),
		pq.Array(arg.AllowedResponseTypes),
		arg.ClientID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.RedirectUri,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OidcEnabled,
		pq.Array(&i.AllowedScopes),
		pq.Array(&i.AllowedGrantTypes),
		pq.Array(&i.AllowedResponseTypes),
	)
	return i, err
}
