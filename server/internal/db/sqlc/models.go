// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type SessionStatus string

const (
	SessionStatusActive   SessionStatus = "active"
	SessionStatusInactive SessionStatus = "inactive"
	SessionStatusRevoked  SessionStatus = "revoked"
)

func (e *SessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SessionStatus(s)
	case string:
		*e = SessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SessionStatus: %T", src)
	}
	return nil
}

type NullSessionStatus struct {
	SessionStatus SessionStatus `json:"session_status"`
	Valid         bool          `json:"valid"` // Valid is true if SessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SessionStatus), nil
}

type AccessToken struct {
	ID             int32     `json:"id"`
	RefreshTokenID int32     `json:"refresh_token_id"`
	Token          string    `json:"token"`
	ExpiresAt      time.Time `json:"expires_at"`
	CreatedAt      time.Time `json:"created_at"`
}

type Client struct {
	ID           int32          `json:"id"`
	ClientID     string         `json:"client_id"`
	ClientSecret string         `json:"client_secret"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	Website      sql.NullString `json:"website"`
	RedirectUri  string         `json:"redirect_uri"`
	IsPublic     bool           `json:"is_public"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
}

type RefreshToken struct {
	ID        int32          `json:"id"`
	SessionID int32          `json:"session_id"`
	Token     string         `json:"token"`
	ClientID  sql.NullString `json:"client_id"`
	ExpiresAt time.Time      `json:"expires_at"`
	CreatedAt time.Time      `json:"created_at"`
}

type Session struct {
	ID             int32          `json:"id"`
	DeviceName     sql.NullString `json:"device_name"`
	IpAddress      sql.NullString `json:"ip_address"`
	UserAgent      sql.NullString `json:"user_agent"`
	Status         SessionStatus  `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	IsLogout       bool           `json:"is_logout"`
	LastAccessedAt time.Time      `json:"last_accessed_at"`
	UserID         int32          `json:"user_id"`
}

type User struct {
	ID                  int32          `json:"id"`
	FirstName           string         `json:"first_name"`
	LastName            string         `json:"last_name"`
	Username            string         `json:"username"`
	Email               string         `json:"email"`
	EmailVerified       bool           `json:"email_verified"`
	PasswordHash        string         `json:"password_hash"`
	PhoneNumber         sql.NullString `json:"phone_number"`
	PhoneNumberVerified bool           `json:"phone_number_verified"`
	IsActive            bool           `json:"is_active"`
	MfaEnabled          bool           `json:"mfa_enabled"`
	CreatedAt           time.Time      `json:"created_at"`
	UpdatedAt           time.Time      `json:"updated_at"`
}
